pipeline {
  agent any
  environment {
    AWS_DEFAULT_REGION      = credentials('aws-default-region')
    AWS_ACCOUNT_ID          = credentials('aws-account-id')
    AWS_ACCESS_KEY_ID       = credentials('aws-access-key-id')
    AWS_SECRET_ACCESS_KEY   = credentials('aws-secret-access-key')
    PROJECT_NAME            = "ci-cd-demo"
    ECR_REPO                = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROJECT_NAME}"
  }
  stages {
    stage('Checkout'){ steps{ checkout scm } }
    stage('Build Docker Image'){ steps{ sh 'docker build -t ${PROJECT_NAME}:latest .' } }
    stage('Login to ECR'){
      steps {
        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com'
      }
    }
    stage('Ensure ECR Repo'){
      steps {
        sh '''
          aws ecr describe-repositories --repository-names ${PROJECT_NAME} --region ${AWS_DEFAULT_REGION} >/dev/null 2>&1 ||           aws ecr create-repository --repository-name ${PROJECT_NAME} --region ${AWS_DEFAULT_REGION}
        '''
      }
    }
    stage('Tag & Push Image'){
      steps {
        sh 'docker tag ${PROJECT_NAME}:latest ${ECR_REPO}:latest'
        sh 'docker push ${ECR_REPO}:latest'
      }
    }
    stage('Update ECS Service'){
      steps {
        sh '''
          cd aws/terraform
          CLUSTER=$(terraform output -raw cluster_name)
          SERVICE=$(terraform output -raw service_name)
          cd ../..

          TASK_DEF_ARN=$(aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --query 'services[0].taskDefinition' --output text)
          aws ecs describe-task-definition --task-definition "$TASK_DEF_ARN" > td.json

          IMAGE="${ECR_REPO}:latest"
          python3 - <<PY > reg.json
import json
data=json.load(open('td.json'))
cd=data['taskDefinition']['containerDefinitions']
cd[0]['image']=f"{IMAGE}"
for k in ['taskDefinitionArn','revision','status','registeredBy','registeredAt','requiresAttributes','compatibilities']:
    data['taskDefinition'].pop(k, None)
print(json.dumps({
  "family": data['taskDefinition']['family'],
  "taskRoleArn": data['taskDefinition'].get('taskRoleArn'),
  "executionRoleArn": data['taskDefinition'].get('executionRoleArn'),
  "networkMode": data['taskDefinition']['networkMode'],
  "containerDefinitions": cd,
  "requiresCompatibilities": data['taskDefinition']['requiresCompatibilities'],
  "cpu": data['taskDefinition'].get('cpu'),
  "memory": data['taskDefinition'].get('memory')
}))
PY
          NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://reg.json --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$NEW_TD_ARN"
        '''
      }
    }
  }
}